// 2060
// 600+
// 9-10%
// add task num for each threads x4
#include "gemm.h"
#include <cuda_runtime.h>
#include <stdio.h>
#include <iostream>

#define TPBX 32
#define TPBY 8

__global__
void opt1_kernel(float *A, float *B, float *C, int M, int K, int N) {
    int idx_x = (blockIdx.x * blockDim.x + threadIdx.x);
    int idx_y = (blockIdx.y * blockDim.y + threadIdx.y) *4;
    int idx = idx_x * NN + idx_y;

    __shared__ float block_A[32][33];
    __shared__ float block_B[32][33];

    float tmp_0 = 0.0f;
    float tmp_1 = 0.0f;
    float tmp_2 = 0.0f;
    float tmp_3 = 0.0f;
    float a00;
    for (int ii = 0; ii < M; ii+=32) {
        // trans A
        block_A[threadIdx.y*4][threadIdx.x] = 
            A[idx_x*K + threadIdx.y*4+ii];
        block_A[threadIdx.y*4+1][threadIdx.x] = 
            A[idx_x*K + threadIdx.y*4+1+ii];
        block_A[threadIdx.y*4+2][threadIdx.x] = 
            A[idx_x*K + threadIdx.y*4+2+ii];
        block_A[threadIdx.y*4+3][threadIdx.x] = 
            A[idx_x*K + threadIdx.y*4+3+ii];
        // No Trans B
        block_B[threadIdx.x][threadIdx.y*4] = 
            B[idx_y + (ii + threadIdx.x) * N];
        block_B[threadIdx.x][threadIdx.y*4+1] = 
            B[idx_y + (ii + threadIdx.x) * N + 1];
        block_B[threadIdx.x][threadIdx.y*4+2] = 
            B[idx_y + (ii + threadIdx.x) * N + 2];
        block_B[threadIdx.x][threadIdx.y*4+3] = 
            B[idx_y + (ii + threadIdx.x) * N + 3];
        __syncthreads();
#pragma unroll 32
        for (int kk = 0; kk < 32; kk++) {
            a00 = block_A[kk][threadIdx.x];
            tmp_0 += a00 * block_B[kk][threadIdx.y*4];
            tmp_1 += a00 * block_B[kk][threadIdx.y*4+1];
            tmp_2 += a00 * block_B[kk][threadIdx.y*4+2];
            tmp_3 += a00 * block_B[kk][threadIdx.y*4+3];
        }
        __syncthreads();
    }
    C[idx] = tmp_0;
    C[idx+1] = tmp_1;
    C[idx+2] = tmp_2;
    C[idx+3] = tmp_3;
}

float opt1(float *A, float *B, float *C, int iter) {
    float time_elapsed = 0.0;
    cudaEvent_t start,stop;
    cudaEventCreate(&start);
    cudaEventCreate(&stop);
    cudaEventRecord(start);
    // for MM = NN = KK = 2048
    dim3 block(TPBX, TPBY);
    dim3 grid(MM/TPBX, NN/TPBY/4);
    for (int ii = 0; ii < iter; ii++) {
        opt1_kernel<<<grid, block>>>(A, B, C, MM, KK, NN);
    }
    cudaDeviceSynchronize();
    cudaEventRecord(stop);
    cudaEventSynchronize(stop);
    cudaEventElapsedTime(&time_elapsed,start,stop);
    return time_elapsed;
}